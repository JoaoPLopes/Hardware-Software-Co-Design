-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axis_fixed_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    strm_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    strm_out_TVALID : OUT STD_LOGIC;
    strm_out_TREADY : IN STD_LOGIC;
    strm_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of axis_fixed_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axis_fixed_macc,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=4,HLS_SYN_FF=578,HLS_SYN_LUT=468,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal strm_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_out_V_data_V_1_vld_in : STD_LOGIC;
    signal strm_out_V_data_V_1_vld_out : STD_LOGIC;
    signal strm_out_V_data_V_1_ack_in : STD_LOGIC;
    signal strm_out_V_data_V_1_ack_out : STD_LOGIC;
    signal strm_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal strm_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal strm_out_V_data_V_1_sel : STD_LOGIC;
    signal strm_out_V_data_V_1_load_A : STD_LOGIC;
    signal strm_out_V_data_V_1_load_B : STD_LOGIC;
    signal strm_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal strm_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal strm_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_last_V_1_vld_in : STD_LOGIC;
    signal strm_out_V_last_V_1_vld_out : STD_LOGIC;
    signal strm_out_V_last_V_1_ack_in : STD_LOGIC;
    signal strm_out_V_last_V_1_ack_out : STD_LOGIC;
    signal strm_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal strm_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal strm_out_V_last_V_1_sel : STD_LOGIC;
    signal strm_out_V_last_V_1_load_A : STD_LOGIC;
    signal strm_out_V_last_V_1_load_B : STD_LOGIC;
    signal strm_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal strm_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal strm_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_in_V_data_V_0_vld_in : STD_LOGIC;
    signal strm_in_V_data_V_0_vld_out : STD_LOGIC;
    signal strm_in_V_data_V_0_ack_in : STD_LOGIC;
    signal strm_in_V_data_V_0_ack_out : STD_LOGIC;
    signal strm_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal strm_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal strm_in_V_data_V_0_sel : STD_LOGIC;
    signal strm_in_V_data_V_0_load_A : STD_LOGIC;
    signal strm_in_V_data_V_0_load_B : STD_LOGIC;
    signal strm_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal strm_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal strm_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_in_V_last_V_0_vld_in : STD_LOGIC;
    signal strm_in_V_last_V_0_vld_out : STD_LOGIC;
    signal strm_in_V_last_V_0_ack_in : STD_LOGIC;
    signal strm_in_V_last_V_0_ack_out : STD_LOGIC;
    signal strm_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal strm_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal strm_in_V_last_V_0_sel : STD_LOGIC;
    signal strm_in_V_last_V_0_load_A : STD_LOGIC;
    signal strm_in_V_last_V_0_load_B : STD_LOGIC;
    signal strm_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal strm_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal localmem_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal localmem_V_ce0 : STD_LOGIC;
    signal localmem_V_we0 : STD_LOGIC;
    signal localmem_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vect_size_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal bias_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal strm_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_8_fu_244_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_1_1_reg_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_reg_149 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_8_reg_316_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_316_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_252_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_data_V_2_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_2_reg_325_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_2_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal localmem_V_load_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal r_V_2_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_2_reg_350 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran8to9_state5 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal val_assign_reg_115 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_22_1_reg_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal tmpa_last_V_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_22_1_1_phi_fu_141_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_206_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_cast_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_226_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_7_cast_cast_fu_267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_552 : BOOLEAN;

    component axis_fixed_macc_lbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    localmem_V_U : component axis_fixed_macc_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => localmem_V_address0,
        ce0 => localmem_V_ce0,
        we0 => localmem_V_we0,
        d0 => strm_in_V_data_V_0_data_out,
        q0 => localmem_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_predicate_tran8to9_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((strm_in_V_data_V_0_ack_out = ap_const_logic_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        strm_in_V_data_V_0_sel_rd <= not(strm_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((strm_in_V_data_V_0_ack_in = ap_const_logic_1) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        strm_in_V_data_V_0_sel_wr <= not(strm_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((strm_in_V_data_V_0_state = ap_const_lv2_2) and (strm_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((strm_in_V_data_V_0_state = ap_const_lv2_3) and (strm_in_V_data_V_0_vld_in = ap_const_logic_0) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((strm_in_V_data_V_0_state = ap_const_lv2_1) and (strm_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((strm_in_V_data_V_0_state = ap_const_lv2_3) and (strm_in_V_data_V_0_ack_out = ap_const_logic_0) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((strm_in_V_data_V_0_vld_in = ap_const_logic_0) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((strm_in_V_data_V_0_ack_out = ap_const_logic_0) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1))) and (strm_in_V_data_V_0_state = ap_const_lv2_3)) or ((strm_in_V_data_V_0_state = ap_const_lv2_1) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((strm_in_V_data_V_0_state = ap_const_lv2_2) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    strm_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((strm_in_V_last_V_0_ack_out = ap_const_logic_1) and (strm_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        strm_in_V_last_V_0_sel_rd <= not(strm_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((strm_in_V_last_V_0_ack_in = ap_const_logic_1) and (strm_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        strm_in_V_last_V_0_sel_wr <= not(strm_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((strm_in_V_last_V_0_state = ap_const_lv2_2) and (strm_in_V_last_V_0_vld_in = ap_const_logic_0)) or ((strm_in_V_last_V_0_state = ap_const_lv2_3) and (strm_in_V_last_V_0_vld_in = ap_const_logic_0) and (strm_in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    strm_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((strm_in_V_last_V_0_state = ap_const_lv2_1) and (strm_in_V_last_V_0_ack_out = ap_const_logic_0)) or ((strm_in_V_last_V_0_state = ap_const_lv2_3) and (strm_in_V_last_V_0_ack_out = ap_const_logic_0) and (strm_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((strm_in_V_last_V_0_vld_in = ap_const_logic_0) and (strm_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((strm_in_V_last_V_0_ack_out = ap_const_logic_0) and (strm_in_V_last_V_0_vld_in = ap_const_logic_1))) and (strm_in_V_last_V_0_state = ap_const_lv2_3)) or ((strm_in_V_last_V_0_state = ap_const_lv2_1) and (strm_in_V_last_V_0_ack_out = ap_const_logic_1)) or ((strm_in_V_last_V_0_state = ap_const_lv2_2) and (strm_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    strm_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((strm_out_V_data_V_1_ack_out = ap_const_logic_1) and (strm_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        strm_out_V_data_V_1_sel_rd <= not(strm_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((strm_out_V_data_V_1_ack_in = ap_const_logic_1) and (strm_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        strm_out_V_data_V_1_sel_wr <= not(strm_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((strm_out_V_data_V_1_state = ap_const_lv2_2) and (strm_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((strm_out_V_data_V_1_state = ap_const_lv2_3) and (strm_out_V_data_V_1_vld_in = ap_const_logic_0) and (strm_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    strm_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((strm_out_V_data_V_1_state = ap_const_lv2_1) and (strm_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((strm_out_V_data_V_1_state = ap_const_lv2_3) and (strm_out_V_data_V_1_ack_out = ap_const_logic_0) and (strm_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    strm_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((strm_out_V_data_V_1_vld_in = ap_const_logic_0) and (strm_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((strm_out_V_data_V_1_ack_out = ap_const_logic_0) and (strm_out_V_data_V_1_vld_in = ap_const_logic_1))) and (strm_out_V_data_V_1_state = ap_const_lv2_3)) or ((strm_out_V_data_V_1_state = ap_const_lv2_1) and (strm_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((strm_out_V_data_V_1_state = ap_const_lv2_2) and (strm_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    strm_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    strm_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((strm_out_V_last_V_1_ack_out = ap_const_logic_1) and (strm_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        strm_out_V_last_V_1_sel_rd <= not(strm_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((strm_out_V_last_V_1_ack_in = ap_const_logic_1) and (strm_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        strm_out_V_last_V_1_sel_wr <= not(strm_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    strm_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                strm_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((strm_out_V_last_V_1_state = ap_const_lv2_2) and (strm_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((strm_out_V_last_V_1_state = ap_const_lv2_3) and (strm_out_V_last_V_1_vld_in = ap_const_logic_0) and (strm_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    strm_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((strm_out_V_last_V_1_state = ap_const_lv2_1) and (strm_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((strm_out_V_last_V_1_state = ap_const_lv2_3) and (strm_out_V_last_V_1_ack_out = ap_const_logic_0) and (strm_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    strm_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((strm_out_V_last_V_1_vld_in = ap_const_logic_0) and (strm_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((strm_out_V_last_V_1_ack_out = ap_const_logic_0) and (strm_out_V_last_V_1_vld_in = ap_const_logic_1))) and (strm_out_V_last_V_1_state = ap_const_lv2_3)) or ((strm_out_V_last_V_1_state = ap_const_lv2_1) and (strm_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((strm_out_V_last_V_1_state = ap_const_lv2_2) and (strm_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    strm_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    strm_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    acc_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_316_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                acc_V <= ret_V_fu_289_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                acc_V <= tmp_9_cast_fu_234_p1;
            end if; 
        end if;
    end process;

    i_op_assign_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_271_p2 = ap_const_lv1_0) and (tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_op_assign_reg_149 <= i_1_fu_252_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_reg_149 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_22_1_1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_341 = ap_const_lv1_0) and (tmp_8_reg_316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_22_1_1_reg_138 <= tmp_last_V_2_reg_330;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                tmp_22_1_1_reg_138 <= tmp_22_1_reg_126;
            end if; 
        end if;
    end process;

    tmp_22_1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_out_V_last_V_1_ack_in = ap_const_logic_0) or (strm_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmpa_last_V_reg_160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                tmp_22_1_reg_126 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                tmp_22_1_reg_126 <= strm_in_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    tmpa_last_V_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_8_fu_244_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    tmpa_last_V_reg_160 <= ap_phi_mux_tmp_22_1_1_phi_fu_141_p4;
                elsif ((ap_const_boolean_1 = ap_condition_552)) then 
                    tmpa_last_V_reg_160 <= tmp_last_V_2_reg_330;
                end if;
            end if; 
        end if;
    end process;

    val_assign_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (grp_fu_178_p1 = ap_const_lv1_0) and (tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                val_assign_reg_115 <= i_fu_195_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                val_assign_reg_115 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                bias_V <= strm_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                localmem_V_load_reg_345 <= localmem_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_316_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_2_reg_350 <= r_V_2_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_data_V_0_load_A = ap_const_logic_1)) then
                strm_in_V_data_V_0_payload_A <= strm_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_data_V_0_load_B = ap_const_logic_1)) then
                strm_in_V_data_V_0_payload_B <= strm_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_last_V_0_load_A = ap_const_logic_1)) then
                strm_in_V_last_V_0_payload_A <= strm_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_last_V_0_load_B = ap_const_logic_1)) then
                strm_in_V_last_V_0_payload_B <= strm_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_out_V_data_V_1_load_A = ap_const_logic_1)) then
                strm_out_V_data_V_1_payload_A <= acc_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_out_V_data_V_1_load_B = ap_const_logic_1)) then
                strm_out_V_data_V_1_payload_B <= acc_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_out_V_last_V_1_load_A = ap_const_logic_1)) then
                strm_out_V_last_V_1_payload_A <= tmpa_last_V_reg_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_out_V_last_V_1_load_B = ap_const_logic_1)) then
                strm_out_V_last_V_1_payload_B <= tmpa_last_V_reg_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_341 <= tmp_7_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_8_reg_316 <= i_op_assign_reg_149(9 downto 9);
                tmp_8_reg_316_pp0_iter1_reg <= tmp_8_reg_316;
                tmp_data_V_2_reg_325_pp0_iter1_reg <= tmp_data_V_2_reg_325;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_8_reg_316_pp0_iter2_reg <= tmp_8_reg_316_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_2_reg_325 <= strm_in_V_data_V_0_data_out;
                tmp_last_V_2_reg_330 <= strm_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((grp_fu_178_p1 = ap_const_lv1_1) or (tmp_3_fu_187_p3 = ap_const_lv1_1)))) then
                vect_size_V <= tmp_5_fu_206_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (strm_out_V_data_V_1_ack_in, strm_out_V_data_V_1_state, strm_out_V_last_V_1_ack_in, strm_out_V_last_V_1_state, strm_in_V_data_V_0_vld_out, ap_CS_fsm, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, tmp_3_fu_187_p3, ap_CS_fsm_state3, grp_fu_178_p1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmpa_last_V_reg_160)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (grp_fu_178_p1 = ap_const_lv1_0) and (tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((grp_fu_178_p1 = ap_const_lv1_1) or (tmp_3_fu_187_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((strm_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((strm_out_V_last_V_1_ack_in = ap_const_logic_0) or (strm_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmpa_last_V_reg_160 = ap_const_lv1_1) and (strm_out_V_last_V_1_state(0) = ap_const_logic_0) and (strm_out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((strm_out_V_last_V_1_ack_in = ap_const_logic_0) or (strm_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmpa_last_V_reg_160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_8_fu_244_p3)
    begin
                ap_block_pp0_stage0_11001 <= ((tmp_8_fu_244_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_8_fu_244_p3)
    begin
                ap_block_pp0_stage0_subdone <= ((tmp_8_fu_244_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(strm_out_V_data_V_1_ack_in, strm_out_V_last_V_1_ack_in)
    begin
                ap_block_state10 <= ((strm_out_V_last_V_1_ack_in = ap_const_logic_0) or (strm_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(strm_in_V_data_V_0_vld_out, tmp_3_fu_187_p3)
    begin
                ap_block_state2 <= ((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter0_assign_proc : process(strm_in_V_data_V_0_vld_out, tmp_8_fu_244_p3)
    begin
                ap_block_state5_pp0_stage0_iter0 <= ((tmp_8_fu_244_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_552_assign_proc : process(tmp_8_reg_316, tmp_7_reg_341, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_552 <= ((tmp_7_reg_341 = ap_const_lv1_1) and (tmp_8_reg_316 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_22_1_1_phi_fu_141_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_22_1_1_reg_138, tmp_8_reg_316, tmp_last_V_2_reg_330, tmp_7_reg_341, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_7_reg_341 = ap_const_lv1_0) and (tmp_8_reg_316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_tmp_22_1_1_phi_fu_141_p4 <= tmp_last_V_2_reg_330;
        else 
            ap_phi_mux_tmp_22_1_1_phi_fu_141_p4 <= tmp_22_1_1_reg_138;
        end if; 
    end process;


    ap_predicate_tran8to9_state5_assign_proc : process(tmp_8_fu_244_p3, tmp_7_fu_271_p2)
    begin
                ap_predicate_tran8to9_state5 <= ((tmp_7_fu_271_p2 = ap_const_lv1_1) or (tmp_8_fu_244_p3 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_178_p1 <= strm_in_V_last_V_0_data_out;
    i_1_fu_252_p2 <= std_logic_vector(unsigned(i_op_assign_reg_149) + unsigned(ap_const_lv10_1));
    i_fu_195_p2 <= std_logic_vector(unsigned(val_assign_reg_115) + unsigned(ap_const_lv10_1));

    localmem_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_fu_201_p1, tmp_4_fu_258_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            localmem_V_address0 <= tmp_4_fu_258_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            localmem_V_address0 <= tmp_fu_201_p1(9 - 1 downto 0);
        else 
            localmem_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    localmem_V_ce0_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_3_fu_187_p3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            localmem_V_ce0 <= ap_const_logic_1;
        else 
            localmem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    localmem_V_we0_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_3_fu_187_p3)
    begin
        if ((not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            localmem_V_we0 <= ap_const_logic_1;
        else 
            localmem_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_2_fu_283_p0 <= localmem_V_load_reg_345;
    r_V_2_fu_283_p1 <= tmp_data_V_2_reg_325_pp0_iter1_reg;
    r_V_2_fu_283_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_283_p0) * signed(r_V_2_fu_283_p1))), 64));
    ret_V_fu_289_p2 <= std_logic_vector(unsigned(r_V_2_reg_350) + unsigned(acc_V));

    strm_in_TDATA_blk_n_assign_proc : process(strm_in_V_data_V_0_state, ap_CS_fsm_state2, tmp_3_fu_187_p3, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_8_fu_244_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_in_TDATA_blk_n <= strm_in_V_data_V_0_state(0);
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_in_TREADY <= strm_in_V_last_V_0_state(1);
    strm_in_V_data_V_0_ack_in <= strm_in_V_data_V_0_state(1);

    strm_in_V_data_V_0_ack_out_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_3_fu_187_p3, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_8_fu_244_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1)) or (not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            strm_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_data_V_0_data_out_assign_proc : process(strm_in_V_data_V_0_payload_A, strm_in_V_data_V_0_payload_B, strm_in_V_data_V_0_sel)
    begin
        if ((strm_in_V_data_V_0_sel = ap_const_logic_1)) then 
            strm_in_V_data_V_0_data_out <= strm_in_V_data_V_0_payload_B;
        else 
            strm_in_V_data_V_0_data_out <= strm_in_V_data_V_0_payload_A;
        end if; 
    end process;

    strm_in_V_data_V_0_load_A <= (strm_in_V_data_V_0_state_cmp_full and not(strm_in_V_data_V_0_sel_wr));
    strm_in_V_data_V_0_load_B <= (strm_in_V_data_V_0_state_cmp_full and strm_in_V_data_V_0_sel_wr);
    strm_in_V_data_V_0_sel <= strm_in_V_data_V_0_sel_rd;
    strm_in_V_data_V_0_state_cmp_full <= '0' when (strm_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    strm_in_V_data_V_0_vld_in <= strm_in_TVALID;
    strm_in_V_data_V_0_vld_out <= strm_in_V_data_V_0_state(0);
    strm_in_V_last_V_0_ack_in <= strm_in_V_last_V_0_state(1);

    strm_in_V_last_V_0_ack_out_assign_proc : process(strm_in_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_3_fu_187_p3, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_8_fu_244_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_8_fu_244_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1)) or (not(((tmp_3_fu_187_p3 = ap_const_lv1_0) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_3_fu_187_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            strm_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_last_V_0_data_out_assign_proc : process(strm_in_V_last_V_0_payload_A, strm_in_V_last_V_0_payload_B, strm_in_V_last_V_0_sel)
    begin
        if ((strm_in_V_last_V_0_sel = ap_const_logic_1)) then 
            strm_in_V_last_V_0_data_out <= strm_in_V_last_V_0_payload_B;
        else 
            strm_in_V_last_V_0_data_out <= strm_in_V_last_V_0_payload_A;
        end if; 
    end process;

    strm_in_V_last_V_0_load_A <= (strm_in_V_last_V_0_state_cmp_full and not(strm_in_V_last_V_0_sel_wr));
    strm_in_V_last_V_0_load_B <= (strm_in_V_last_V_0_state_cmp_full and strm_in_V_last_V_0_sel_wr);
    strm_in_V_last_V_0_sel <= strm_in_V_last_V_0_sel_rd;
    strm_in_V_last_V_0_state_cmp_full <= '0' when (strm_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    strm_in_V_last_V_0_vld_in <= strm_in_TVALID;
    strm_in_V_last_V_0_vld_out <= strm_in_V_last_V_0_state(0);
    strm_out_TDATA <= strm_out_V_data_V_1_data_out;

    strm_out_TDATA_blk_n_assign_proc : process(strm_out_V_data_V_1_state, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            strm_out_TDATA_blk_n <= strm_out_V_data_V_1_state(1);
        else 
            strm_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_TLAST <= strm_out_V_last_V_1_data_out;
    strm_out_TVALID <= strm_out_V_last_V_1_state(0);
    strm_out_V_data_V_1_ack_in <= strm_out_V_data_V_1_state(1);
    strm_out_V_data_V_1_ack_out <= strm_out_TREADY;

    strm_out_V_data_V_1_data_out_assign_proc : process(strm_out_V_data_V_1_payload_A, strm_out_V_data_V_1_payload_B, strm_out_V_data_V_1_sel)
    begin
        if ((strm_out_V_data_V_1_sel = ap_const_logic_1)) then 
            strm_out_V_data_V_1_data_out <= strm_out_V_data_V_1_payload_B;
        else 
            strm_out_V_data_V_1_data_out <= strm_out_V_data_V_1_payload_A;
        end if; 
    end process;

    strm_out_V_data_V_1_load_A <= (strm_out_V_data_V_1_state_cmp_full and not(strm_out_V_data_V_1_sel_wr));
    strm_out_V_data_V_1_load_B <= (strm_out_V_data_V_1_state_cmp_full and strm_out_V_data_V_1_sel_wr);
    strm_out_V_data_V_1_sel <= strm_out_V_data_V_1_sel_rd;
    strm_out_V_data_V_1_state_cmp_full <= '0' when (strm_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    strm_out_V_data_V_1_vld_in_assign_proc : process(strm_out_V_data_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((strm_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            strm_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            strm_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    strm_out_V_data_V_1_vld_out <= strm_out_V_data_V_1_state(0);
    strm_out_V_last_V_1_ack_in <= strm_out_V_last_V_1_state(1);
    strm_out_V_last_V_1_ack_out <= strm_out_TREADY;

    strm_out_V_last_V_1_data_out_assign_proc : process(strm_out_V_last_V_1_payload_A, strm_out_V_last_V_1_payload_B, strm_out_V_last_V_1_sel)
    begin
        if ((strm_out_V_last_V_1_sel = ap_const_logic_1)) then 
            strm_out_V_last_V_1_data_out <= strm_out_V_last_V_1_payload_B;
        else 
            strm_out_V_last_V_1_data_out <= strm_out_V_last_V_1_payload_A;
        end if; 
    end process;

    strm_out_V_last_V_1_load_A <= (strm_out_V_last_V_1_state_cmp_full and not(strm_out_V_last_V_1_sel_wr));
    strm_out_V_last_V_1_load_B <= (strm_out_V_last_V_1_state_cmp_full and strm_out_V_last_V_1_sel_wr);
    strm_out_V_last_V_1_sel <= strm_out_V_last_V_1_sel_rd;
    strm_out_V_last_V_1_state_cmp_full <= '0' when (strm_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    strm_out_V_last_V_1_vld_in_assign_proc : process(strm_out_V_data_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((strm_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            strm_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            strm_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    strm_out_V_last_V_1_vld_out <= strm_out_V_last_V_1_state(0);
    tmp_3_fu_187_p3 <= val_assign_reg_115(9 downto 9);
    tmp_4_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_149),64));
    tmp_5_fu_206_p1 <= val_assign_reg_115(9 - 1 downto 0);
    tmp_7_cast_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vect_size_V),10));
    tmp_7_fu_271_p2 <= "1" when (i_op_assign_reg_149 = tmp_7_cast_cast_fu_267_p1) else "0";
    tmp_8_fu_244_p3 <= i_op_assign_reg_149(9 downto 9);
        tmp_9_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_226_p3),64));

    tmp_9_fu_226_p3 <= (bias_V & ap_const_lv16_0);
    tmp_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_115),64));
end behav;
